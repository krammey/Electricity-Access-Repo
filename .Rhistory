worldmap$region[worldmap$region == 'Virgin Islands'] <- "United States Virgin Islands"
countrylist <- unique(worldmap$region)
countrylist <- countrylist[order(countrylist$region),]
View(countrylist)
countrylist <- data.frame(unique(worldmap$region))
View(countrylist)
countrylist <- countrylist[order(countrylist$unique.worldmap.region),]
runApp()
map <- CountryMapDataFxn(c,h)
# Load necessary packages
library(shiny)
library(shinydashboard)
library(ggplot2)
library(ggmap)
library(maps)
library(magick)
# Load world map and fix virgin islands labels
worldmap <- map_data(map="world")
worldmap$region[worldmap$region == 'Virgin Islands'][1:23] <- "British Virgin Islands"
worldmap$region[worldmap$region == 'Virgin Islands'] <- "United States Virgin Islands"
# Get list of countries
countrylist <- data.frame(unique(worldmap$region))
countrylist <- countrylist[order(countrylist$unique.worldmap.region),]
# Load access data
access_data <- read.csv('access_data.csv', header=TRUE, stringsAsFactors = F, na.strings="NA")
# Get rid of axes for plot
ditch_the_axes <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank(),
panel.background = element_blank()
)
# Define data processing function with year, h, as input
YearMapDataFxn = function(h,MaxPerc=100){
# Get access data for year h
access_df <- access_data[access_data$Year == as.numeric(h),]
access_df <- cbind.data.frame(access_df$country, as.numeric(access_df$Nat.Elec.Rate), stringsAsFactors=FALSE)
names(access_df) <- c("Country","Nat.Elec.Rate")
# Replace electrification rates over 80% with NA
access_df$Nat.Elec.Rate[access_df$Nat.Elec.Rate > MaxPerc] <- NA
# Merge access data with map.world by country
df <- merge(worldmap, access_df, by.x = "region", by.y = "Country", sort = F, all.x=T)
df2 <- df[order(df$order),]
# Append column to map data and rename
worldmap2 <- cbind.data.frame(worldmap, as.numeric(df2$Nat.Elec.Rate), stringsAsFactors=FALSE)
names(worldmap2)[names(worldmap2) == "as.numeric(df2$Nat.Elec.Rate)"] <- "access"
return(worldmap2)
}
# Define data processing function with year, h, as input
CountryMapDataFxn = function(c,h){
# Get access data for year h, country c
access_df <- access_data[access_data$country == c,]
access_df <- access_df[access_df$Year == h,]
# Merge access data with worldmap by country
countrymap <- worldmap[worldmap$region == c,]
df <- merge(countrymap, access_df, by.x = "region", by.y = "country")
df2 <- df[order(df$Year),]
# Append column to map data and rename
# worldmap2 <- cbind.data.frame(worldmap, as.numeric(df2$Nat.Elec.Rate), stringsAsFactors=FALSE)
names(df2)[8:10] <- c("National","Rural","Urban")
return(df2)
}
c <- "Afghanistan"
c <- "Afghanistan"
h <- 1990
map <- CountryMapDataFxn(c,h)
View(map)
View(worldmap)
map <- cbind.data.frame(map[c(1:6),],map[c,])
map <- CountryMapDataFxn(c,h)
map <- cbind.data.frame(map[1:6,],map[c,])
View(map)
map <- CountryMapDataFxn(c,h)
dim(map[1:6,])
dim(map[,1:6])
map <- CountryMapDataFxn(c,h)
map <- cbind.data.frame(map[,c(1:6)],map[,c])
c_in <- "Afghanistan"
map <- cbind.data.frame(map[,c(1:6)],map[,c_in])
dim(map[c_in])
c_in
map <- CountryMapDataFxn(c,h)
map2 <- map[,1:6]
View(map2)
map2 <- CountryMapDataFxn(c,h)
map <- map2[,1:6]
map2 <- CountryMapDataFxn(c,h)
map <- map2[,1:6]
map$access <- map2[names(map2) == c]#input$inputregion]
c
map$access <- map2[names(map2) == "Rural"]#input$inputregion]
names(map)[ncol(map)] <- "access"
View(map)
runApp()
worldmap2 <- YearMapDataFxn(h)
View(worldmap2)
gg = ggplot() +
geom_map(
data=worldmap2,
map=worldmap2,
aes(x=long, y=lat, map_id=region, fill=access)
) +
scale_fill_gradient(low = "orange", high = "blue", guide = "colourbar", limits=c(0,100)) +
coord_equal() +
ditch_the_axes +
annotate("text",x=160, y=66.5,label = "\U00A9 K. Ramirez-Meyers",col="white", cex=2,alpha = 0.8)
gg
c <- "Afghanistan"
h <- 1990
r <- "Rural"
map2 <- CountryMapDataFxn(c,h)
map <- map2[,1:6]
map$access <- map2[names(map2) == r]#input$inputregion]
names(map)[ncol(map)] <- "access"
gg = ggplot() +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region, fill=access)
) +
scale_fill_gradient(low = "orange", high = "blue", guide = "colourbar", limits=c(0,100)) +
coord_equal() +
ditch_the_axes
gg
runApp()
runApp()
r
if(r == "National"){r <- ""}
r="National"
if(r == "National"){r <- ""}
r
runApp()
h
r
c <- "Acsencion Island"
c
map2 <- CountryMapDataFxn(c,h)
map <- map2[,1:6]
map$access <- map2[names(map2) == r]
names(map)[ncol(map)] <- "access"
gg = ggplot() +
ggtitle(paste0(as.character(map$access[1,1]),"%")) +
theme(plot.title = element_text(hjust = 0.5, size = 30)) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region, fill=access)
) +
scale_fill_gradient(low = "orange", high = "blue", guide = "colourbar", limits=c(0,100)) +
coord_equal() +
ditch_the_axes
gg
runApp()
if(is.na(map$access[1,1]) == T){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for ", input$inputcountry)) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}
is.na(map$access[1, 1])
map$access[1, 1]
map$access[1,1]
View(map)
c
h
map2 <- CountryMapDataFxn(c,h)
map <- map2[,1:6]
map$access <- map2[names(map2) == r]
names(map)[ncol(map)] <- "access"
View(map)
View(map)
View(map)
access_df <- access_data[access_data$country == c,]
View(access_df)
access_df <- access_df[access_df$Year == h,]
countrymap <- worldmap[worldmap$region == c,]
View(countrymap)
View(worldmap)
c
c <- "Ascencion Island"
map2 <- CountryMapDataFxn(c,h)
View(map2)
access_df <- access_data[access_data$country == c,]
c
dim(map)
dim(map)[1]
runApp()
c
map2 <- CountryMapDataFxn(c,h)
map <- map2[,1:6]
map$access <- map2[names(map2) == r]
names(map)[ncol(map)] <- "access"
gg = ggplot() +
ggtitle(paste0(as.character(map$access[1,1]),"%")) +
theme(plot.title = element_text(hjust = 0.5, size = 30)) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region, fill=access)
) +
scale_fill_gradient(low = "orange", high = "blue", guide = "colourbar", limits=c(0,100)) +
coord_equal() +
ditch_the_axes
if(dim(map$access)[1]){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for ", input$inputcountry)) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else if(is.na(map$access[1,1]) == T){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", input$inputcountry)) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else {
gg = gg
}
if(dim(map$access)[1]){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for ", input$inputcountry)) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
return(gg)
}else if(is.na(map$access[1,1]) == T){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", input$inputcountry)) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else {
gg = gg
}
if(dim(map$access)[1]==0){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", input$inputcountry)) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
return(gg)
}else if(is.na(map$access[1,1]) == T){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", input$inputcountry)) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else {
gg = gg
}
if(dim(map$access)[1]==0){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", input$inputcountry)) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
return(gg)
}else if(is.na(map$access[1,1]) == T){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", input$inputcountry)) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else {
gg = gg
}
if(dim(map$access)[1]==0){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", c)) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
return(gg)
}else if(is.na(map$access[1,1]) == T){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", input$inputcountry)) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else {
gg = gg
}
if(dim(map$access)[1]==0){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", c)) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else if(is.na(map$access[1,1]) == T){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", input$inputcountry)) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else {
gg = gg
}
gg
runApp()
c
map <- map_data(map="world",region = c)
map <- map_data(map="world",regions = c)
map <- worldmap[,worldmap$region == c]
View(map)
map <- worldmap[worldmap$region == c,]
map <- worldmap[worldmap$region==as.character(c),]
c
worldmap[worldmap$region == c,]
worldmap[worldmap$region == "Aruba",]
c
worldmap[worldmap$region == "Ascencion Island",]
worldmap[worldmap$region == "Ascension Island",]
c = "Ascension Island"
map <- worldmap[worldmap$region==as.character(c),]
map <- worldmap[worldmap$region==c,]
View(map)
runApp()
if(dim(map$access)[1]==0){
map <- worldmap[worldmap$region==c,]
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", input$inputcountry)) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region)
) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else if(is.na(map$access[1,1]) == T){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", input$inputcountry)) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region)
) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else {
gg = gg
}
dim(map$access)
map2 <- CountryMapDataFxn(c,h)
map <- map2[,1:6]
map$access <- map2[names(map2) == r]
names(map)[ncol(map)] <- "access"
c
h
r
r="Rural"
map2 <- CountryMapDataFxn(c,h)
map <- map2[,1:6]
map$access <- map2[names(map2) == r]
names(map)[ncol(map)] <- "access"
gg = ggplot() +
ggtitle(paste0(as.character(map$access[1,1]),"%")) +
theme(plot.title = element_text(hjust = 0.5, size = 30)) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region, fill=access)
) +
scale_fill_gradient(low = "orange", high = "blue", guide = "colourbar", limits=c(0,100)) +
coord_equal()
if(dim(map$access)[1]==0){
map <- worldmap[worldmap$region==c,]
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", input$inputcountry)) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region)
) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else if(is.na(map$access[1,1]) == T){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", input$inputcountry)) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region)
) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else {
gg = gg
}
if(dim(map$access)[1]==0){
map <- worldmap[worldmap$region==c,]
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", input$inputcountry)) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region)
) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else if(is.na(map$access[1,1]) == T){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", c)) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region)
) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else {
gg = gg
}
map2 <- CountryMapDataFxn(c,h)
map <- map2[,1:6]
map$access <- map2[names(map2) == r]
names(map)[ncol(map)] <- "access"
if(dim(map$access)[1]==0){
map <- worldmap[worldmap$region==c,]
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", input$inputcountry)) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region)
) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else if(is.na(map$access[1,1]) == T){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", c)) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region)
) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else {
gg = gg
}
if(dim(map$access)[1]==0){
map <- worldmap[worldmap$region==c,]
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", c)) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region)
) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else if(is.na(map$access[1,1]) == T){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", c)) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region)
) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else {
gg = gg
}
c
View(map)
map2 <- CountryMapDataFxn(c,h)
map <- map2[,1:6]
map$access <- map2[names(map2) == r]
names(map)[ncol(map)] <- "access"
gg = ggplot() +
ggtitle(paste0(as.character(map$access[1,1]),"%")) +
theme(plot.title = element_text(hjust = 0.5, size = 30)) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region, fill=access)
) +
scale_fill_gradient(low = "orange", high = "blue", guide = "colourbar", limits=c(0,100)) +
coord_equal()
if(dim(map$access)[1]==0){
map <- worldmap[worldmap$region==c,]
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n",as.character(c))) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region)
) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else if(is.na(map$access[1,1]) == T){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", c)) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region)
) +
theme(plot.title = element_text(hjust = 0.5, size = 30))
}else {
gg = gg
}
gg
runApp()
runApp()
install.packages('markdown')
library(markdown)
runApp()
runApp()
runApp()
runApp()
runApp()
View(worldmap)
runApp()
runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='krammey', token='49F641B51C534CAE4A98ADD95AE66F5B', secret='S0bnX9+TDVnl+MMbHITByDy5TSDigAKkG8vurzey')
getwd()
library(rsconnect)
rsconnect::deployApp('app,R')
library(rsconnect)
rsconnect::deployApp('app.R')
library(rsconnect)
rsconnect::deployApp()
runApp()
compute_data <- function(updateProgress = NULL) {
# Create 0-row data frame which will be used to store data
dat <- data.frame(x = numeric(0), y = numeric(0))
for (i in 1:10) {
Sys.sleep(0.25)
# Compute new row of data
new_row <- data.frame(x = rnorm(1), y = rnorm(1))
# If we were passed a progress update function, call it
if (is.function(updateProgress)) {
text <- paste0("x:", round(new_row$x, 2), " y:", round(new_row$y, 2))
updateProgress(detail = text)
}
# Add the new row of data
dat <- rbind(dat, new_row)
}
dat
}
runApp()
rsconnect::deployApp()
